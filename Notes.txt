NEXT JS


What is Next.js?

Next.js is a React framework for building server-rendered and statically generated web applications with better performance, SEO, and developer experience.

It extends React by adding features like:

✅ File-based Routing
✅ Server-Side Rendering (SSR)
✅ Static Site Generation (SSG)
✅ API Routes
✅ Image Optimization
✅ Middleware & Server Actions

Difference Between React.js and Next.js

| Feature          | React.js                                   | Next.js                             |
| ---------------- | ------------------------------------------ | ----------------------------------- |
| **Type**         | JavaScript library for UI                  | Full-stack React framework          |
| **Rendering**    | Client-side only                           | Server-side, Static, or Client-side |
| **Routing**      | Manual using `react-router-dom`            | File-based routing (built-in)       |
| **SEO**          | Poor (since content loads on client)       | Excellent (server-rendered pages)   |
| **Setup**        | Needs config for routing, SSR, etc.        | Comes pre-configured                |
| **Performance**  | Slower initial load                        | Faster with pre-rendering           |
| **API Handling** | Needs separate backend (like Node/Express) | Built-in API routes                 |
| **Deployment**   | Manual setup                               | Easy deployment (Vercel, etc.)      |


Next.js Folder Structure
When you create a Next.js app (npx create-next-app@latest):

my-app/
│
├── app/                # New App Router (from Next.js 13+)
│   ├── page.tsx        # Home page
│   ├── about/
│   │   └── page.tsx    # About page
│   └── blog/
│       └── page.tsx    # Blog page
│
├── public/             # Static files (images, fonts)
├── styles/             # CSS or Tailwind styles
├── components/         # Reusable components
├── package.json
└── next.config.js      # Config file



Routing in Next.js

1. Basic Routing

Each folder inside /app represents a route.
Each route needs a page.tsx or page.js.

app/
 ├── page.tsx          →  localhost:3000/
 ├── about/
 │    └── page.tsx     →  localhost:3000/about
 └── contact/
      └── page.tsx     →  localhost:3000/contact


Example Code — app/about/page.tsx:

export default function AboutPage() {
  return <h1>About Us</h1>;
}


2. Nested Routing
You can nest folders to create sub-routes.

app/
 └── blog/
      ├── page.tsx           → /blog
      └── posts/
           └── page.tsx      → /blog/posts

app/blog/posts/page.tsx:

export default function BlogPosts() {
  return <h1>All Blog Posts</h1>;
}


3. Dynamic Routing
Use square brackets [ ] to make dynamic routes (like /blog/1, /blog/2, etc.)

app/
 └── blog/
      ├── page.tsx            → /blog
      └── [id]/
           └── page.tsx       → /blog/1, /blog/2, etc.

app/blog/[id]/page.tsx:

interface BlogPageProps {
  params: { id: string };
}

export default function BlogPage({ params }: BlogPageProps) {
  return <h1>Blog ID: {params.id}</h1>;
}


4. Dynamic Nested Routing Example

app/
 └── users/
      └── [userId]/
           └── posts/
                └── [postId]/
                     └── page.tsx


app/users/[userId]/posts/[postId]/page.tsx:

interface PageProps {
  params: { userId: string; postId: string };
}

export default function UserPost({ params }: PageProps) {
  return (
    <div>
      <h2>User: {params.userId}</h2>
      <h3>Post: {params.postId}</h3>
    </div>
  );
}


5. Linking Between Pages
Use Next.js <Link> for navigation.

import Link from "next/link";

export default function Home() {
  return (
    <div>
      <h1>Home Page</h1>
      <Link href="/about">Go to About</Link>
    </div>
  );
}






